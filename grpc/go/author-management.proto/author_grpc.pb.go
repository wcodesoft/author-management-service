// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: protos/author.proto

package author_management_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorManagementClient is the client API for AuthorManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorManagementClient interface {
	// Create a new Author entry on the service.
	CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Response, error)
	// Update Author by the uuid if they exist in the system.
	UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Response, error)
	// Try to delete Author if it exists on the system.
	DeleteAuthor(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Response, error)
	// Get all authors from service.
	GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAuthorResponse, error)
	// Get Author by uuid if they exist in the system.
	GetAuthor(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Author, error)
}

type authorManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorManagementClient(cc grpc.ClientConnInterface) AuthorManagementClient {
	return &authorManagementClient{cc}
}

func (c *authorManagementClient) CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.authormanagement.AuthorManagement/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorManagementClient) UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.authormanagement.AuthorManagement/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorManagementClient) DeleteAuthor(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.authormanagement.AuthorManagement/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorManagementClient) GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAuthorResponse, error) {
	out := new(GetAuthorResponse)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.authormanagement.AuthorManagement/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorManagementClient) GetAuthor(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/org.wcode.proto.authormanagement.AuthorManagement/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorManagementServer is the server API for AuthorManagement service.
// All implementations must embed UnimplementedAuthorManagementServer
// for forward compatibility
type AuthorManagementServer interface {
	// Create a new Author entry on the service.
	CreateAuthor(context.Context, *Author) (*Response, error)
	// Update Author by the uuid if they exist in the system.
	UpdateAuthor(context.Context, *Author) (*Response, error)
	// Try to delete Author if it exists on the system.
	DeleteAuthor(context.Context, *RequestId) (*Response, error)
	// Get all authors from service.
	GetAuthors(context.Context, *emptypb.Empty) (*GetAuthorResponse, error)
	// Get Author by uuid if they exist in the system.
	GetAuthor(context.Context, *RequestId) (*Author, error)
	mustEmbedUnimplementedAuthorManagementServer()
}

// UnimplementedAuthorManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorManagementServer struct {
}

func (UnimplementedAuthorManagementServer) CreateAuthor(context.Context, *Author) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedAuthorManagementServer) UpdateAuthor(context.Context, *Author) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedAuthorManagementServer) DeleteAuthor(context.Context, *RequestId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedAuthorManagementServer) GetAuthors(context.Context, *emptypb.Empty) (*GetAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedAuthorManagementServer) GetAuthor(context.Context, *RequestId) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedAuthorManagementServer) mustEmbedUnimplementedAuthorManagementServer() {}

// UnsafeAuthorManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorManagementServer will
// result in compilation errors.
type UnsafeAuthorManagementServer interface {
	mustEmbedUnimplementedAuthorManagementServer()
}

func RegisterAuthorManagementServer(s grpc.ServiceRegistrar, srv AuthorManagementServer) {
	s.RegisterService(&AuthorManagement_ServiceDesc, srv)
}

func _AuthorManagement_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorManagementServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.authormanagement.AuthorManagement/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorManagementServer).CreateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorManagement_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorManagementServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.authormanagement.AuthorManagement/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorManagementServer).UpdateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorManagement_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorManagementServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.authormanagement.AuthorManagement/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorManagementServer).DeleteAuthor(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorManagement_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorManagementServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.authormanagement.AuthorManagement/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorManagementServer).GetAuthors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorManagement_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorManagementServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.wcode.proto.authormanagement.AuthorManagement/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorManagementServer).GetAuthor(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorManagement_ServiceDesc is the grpc.ServiceDesc for AuthorManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.wcode.proto.authormanagement.AuthorManagement",
	HandlerType: (*AuthorManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _AuthorManagement_CreateAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _AuthorManagement_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _AuthorManagement_DeleteAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _AuthorManagement_GetAuthors_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _AuthorManagement_GetAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/author.proto",
}
